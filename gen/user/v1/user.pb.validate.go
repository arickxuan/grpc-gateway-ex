// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on IsLoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IsLoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	return nil
}

// IsLoginRequestValidationError is the validation error returned by
// IsLoginRequest.Validate if the designated constraints aren't met.
type IsLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsLoginRequestValidationError) ErrorName() string { return "IsLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e IsLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsLoginRequestValidationError{}

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SearchRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Query

	// no validation rules for Page

	// no validation rules for Limit

	return nil
}

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on IsLoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IsLoginReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	// no validation rules for Timestamp

	return nil
}

// IsLoginReplyValidationError is the validation error returned by
// IsLoginReply.Validate if the designated constraints aren't met.
type IsLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsLoginReplyValidationError) ErrorName() string { return "IsLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e IsLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsLoginReplyValidationError{}

// Validate checks the field values on AddReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	// no validation rules for Code

	return nil
}

// AddReplyValidationError is the validation error returned by
// AddReply.Validate if the designated constraints aren't met.
type AddReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReplyValidationError) ErrorName() string { return "AddReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReplyValidationError{}
